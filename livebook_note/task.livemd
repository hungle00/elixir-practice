# task

## Section

```elixir
1..10
|> Enum.map(fn number -> Task.async(fn -> number + 1 end) end)
|> Enum.map(fn task -> Task.await(task) end)
```

```elixir
1..10
|> Task.async_stream(fn number -> number + 1 end)
|> Enum.map(fn {:ok, result} -> result end)
```

```elixir
# We can pass the reference to a given function in Task.async_stream  
# instead of providing an anonymous function
defmodule Increaser do
  def increase(number) do
    # represent slow task
    :timer.sleep(1000)
    number + 1
  end
end

1..10
|> Task.async_stream(&Increaser.increase/1)
|> Enum.map(fn {:ok, result} -> result end)
```

http://dino.codes/posts/elixir-findings-asynchronous-task-streams/  
https://learn-elixir.dev/blogs/uses-of-elixir-task-module

```elixir
items = ["alpha", "beta", "gama"]

Enum.map(items, fn item ->
  Task.async(fn ->
    :timer.sleep(4000)
    IO.inspect("Hello #{item}")
    :ok
  end)
end)
|> Enum.map(&Task.await/1)
```
